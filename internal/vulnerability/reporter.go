package vulnerability

import (
	"bytes"
	"encoding/json"
	"fmt"
	"html/template"
	"os"
	"path/filepath"
	"time"

	"github.com/lkpsg/ccscanner/pkg/models"
	"go.uber.org/zap"
)

// Reporter 漏洞报告生成器
type Reporter struct {
	logger *zap.Logger // 日志记录器
}

// NewReporter 创建报告生成器
func NewReporter(logger *zap.Logger) *Reporter {
	if logger == nil {
		logger, _ = zap.NewProduction()
	}

	return &Reporter{
		logger: logger,
	}
}

// Format 报告格式
type Format string

const (
	FormatJSON Format = "json" // JSON格式
	FormatHTML Format = "html" // HTML格式
	FormatText Format = "text" // 文本格式
)

// GenerateReport 生成漏洞报告
func (r *Reporter) GenerateReport(report *Report, format Format, outputFile string) error {
	// 创建输出目录
	if err := os.MkdirAll(filepath.Dir(outputFile), 0755); err != nil {
		return fmt.Errorf("failed to create output directory: %v", err)
	}

	// 根据格式生成报告
	var data []byte
	var err error

	switch format {
	case FormatJSON:
		data, err = r.generateJSONReport(report)
	case FormatHTML:
		data, err = r.generateHTMLReport(report)
	case FormatText:
		data, err = r.generateTextReport(report)
	default:
		return fmt.Errorf("unsupported format: %s", format)
	}

	if err != nil {
		return err
	}

	// 写入文件
	if err := os.WriteFile(outputFile, data, 0644); err != nil {
		return fmt.Errorf("failed to write report: %v", err)
	}

	return nil
}

// generateJSONReport 生成JSON格式报告
func (r *Reporter) generateJSONReport(report *Report) ([]byte, error) {
	// 创建报告数据
	data := struct {
		GeneratedAt         time.Time     `json:"generated_at"`
		TotalDependencies   int           `json:"total_dependencies"`
		VulnerableDeps     int           `json:"vulnerable_deps"`
		TotalVulnerabilities int          `json:"total_vulnerabilities"`
		SeveritySummary    struct {
			High   int `json:"high"`
			Medium int `json:"medium"`
			Low    int `json:"low"`
		} `json:"severity_summary"`
		Details []ReportDetail `json:"details"`
	}{
		GeneratedAt:         time.Now(),
		TotalDependencies:   report.TotalDependencies,
		VulnerableDeps:     report.VulnerableDeps,
		TotalVulnerabilities: report.TotalVulnerabilities,
		SeveritySummary: struct {
			High   int `json:"high"`
			Medium int `json:"medium"`
			Low    int `json:"low"`
		}{
			High:   report.HighSeverity,
			Medium: report.MediumSeverity,
			Low:    report.LowSeverity,
		},
		Details: report.Details,
	}

	// 序列化为JSON
	return json.MarshalIndent(data, "", "  ")
}

// generateHTMLReport 生成HTML格式报告
func (r *Reporter) generateHTMLReport(report *Report) ([]byte, error) {
	// HTML模板
	tmpl := `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>漏洞扫描报告</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
        }
        .header {
            margin-bottom: 20px;
        }
        .summary {
            margin-bottom: 30px;
        }
        .severity {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 3px;
            color: white;
        }
        .high {
            background-color: #dc3545;
        }
        .medium {
            background-color: #ffc107;
        }
        .low {
            background-color: #17a2b8;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }
        th {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>漏洞扫描报告</h1>
        <p>生成时间: {{.GeneratedAt}}</p>
    </div>

    <div class="summary">
        <h2>摘要</h2>
        <p>总依赖数: {{.TotalDependencies}}</p>
        <p>存在漏洞的依赖数: {{.VulnerableDeps}}</p>
        <p>总漏洞数: {{.TotalVulnerabilities}}</p>
        <p>漏洞严重程度分布:</p>
        <ul>
            <li><span class="severity high">高危: {{.HighSeverity}}</span></li>
            <li><span class="severity medium">中危: {{.MediumSeverity}}</span></li>
            <li><span class="severity low">低危: {{.LowSeverity}}</span></li>
        </ul>
    </div>

    <div class="details">
        <h2>详细信息</h2>
        <table>
            <tr>
                <th>依赖</th>
                <th>版本</th>
                <th>漏洞ID</th>
                <th>严重程度</th>
                <th>描述</th>
                <th>修复版本</th>
            </tr>
            {{range .Details}}
                {{range .Vulnerabilities}}
                <tr>
                    <td>{{$.Dependency.Name}}</td>
                    <td>{{$.Dependency.Version}}</td>
                    <td>{{.ID}}</td>
                    <td><span class="severity {{.Severity}}">{{.Severity}}</span></td>
                    <td>{{.Description}}</td>
                    <td>{{.FixedIn}}</td>
                </tr>
                {{end}}
            {{end}}
        </table>
    </div>
</body>
</html>
`

	// 解析模板
	t, err := template.New("report").Parse(tmpl)
	if err != nil {
		return nil, fmt.Errorf("failed to parse template: %v", err)
	}

	// 创建报告数据
	data := struct {
		GeneratedAt         time.Time
		TotalDependencies   int
		VulnerableDeps     int
		TotalVulnerabilities int
		HighSeverity       int
		MediumSeverity     int
		LowSeverity        int
		Details            []ReportDetail
	}{
		GeneratedAt:         time.Now(),
		TotalDependencies:   report.TotalDependencies,
		VulnerableDeps:     report.VulnerableDeps,
		TotalVulnerabilities: report.TotalVulnerabilities,
		HighSeverity:       report.HighSeverity,
		MediumSeverity:     report.MediumSeverity,
		LowSeverity:        report.LowSeverity,
		Details:            report.Details,
	}

	// 渲染模板
	var buf bytes.Buffer
	if err := t.Execute(&buf, data); err != nil {
		return nil, fmt.Errorf("failed to render template: %v", err)
	}

	return buf.Bytes(), nil
}

// generateTextReport 生成文本格式报告
func (r *Reporter) generateTextReport(report *Report) ([]byte, error) {
	var buf bytes.Buffer

	// 写入报告头
	fmt.Fprintf(&buf, "漏洞扫描报告\n")
	fmt.Fprintf(&buf, "生成时间: %s\n\n", time.Now().Format("2006-01-02 15:04:05"))

	// 写入摘要
	fmt.Fprintf(&buf, "摘要:\n")
	fmt.Fprintf(&buf, "总依赖数: %d\n", report.TotalDependencies)
	fmt.Fprintf(&buf, "存在漏洞的依赖数: %d\n", report.VulnerableDeps)
	fmt.Fprintf(&buf, "总漏洞数: %d\n", report.TotalVulnerabilities)
	fmt.Fprintf(&buf, "漏洞严重程度分布:\n")
	fmt.Fprintf(&buf, "- 高危: %d\n", report.HighSeverity)
	fmt.Fprintf(&buf, "- 中危: %d\n", report.MediumSeverity)
	fmt.Fprintf(&buf, "- 低危: %d\n\n", report.LowSeverity)

	// 写入详细信息
	fmt.Fprintf(&buf, "详细信息:\n")
	for _, detail := range report.Details {
		fmt.Fprintf(&buf, "\n依赖: %s@%s\n", detail.Dependency.Name, detail.Dependency.Version)
		for _, vuln := range detail.Vulnerabilities {
			fmt.Fprintf(&buf, "- CVE: %s\n", vuln.ID)
			fmt.Fprintf(&buf, "  严重程度: %s\n", vuln.Severity)
			fmt.Fprintf(&buf, "  描述: %s\n", vuln.Description)
			if vuln.FixedIn != "" {
				fmt.Fprintf(&buf, "  修复版本: %s\n", vuln.FixedIn)
			}
			if len(vuln.References) > 0 {
				fmt.Fprintf(&buf, "  参考链接:\n")
				for _, ref := range vuln.References {
					fmt.Fprintf(&buf, "  - %s\n", ref)
				}
			}
		}
	}

	return buf.Bytes(), nil
}

/*
使用示例:

1. 创建报告生成器:
reporter := NewReporter(logger)

2. 生成JSON格式报告:
err := reporter.GenerateReport(report, FormatJSON, "report.json")
if err != nil {
    log.Printf("Failed to generate JSON report: %v\n", err)
}

3. 生成HTML格式报告:
err = reporter.GenerateReport(report, FormatHTML, "report.html")
if err != nil {
    log.Printf("Failed to generate HTML report: %v\n", err)
}

4. 生成文本格式报告:
err = reporter.GenerateReport(report, FormatText, "report.txt")
if err != nil {
    log.Printf("Failed to generate text report: %v\n", err)
}
*/ 