package extractor

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"go.uber.org/zap"
)

func TestYarnExtractor_Extract(t *testing.T) {
	// 创建临时测试目录
	testDir, err := os.MkdirTemp("", "yarn-test-*")
	if err != nil {
		t.Fatal(err)
	}
	defer os.RemoveAll(testDir)

	// 创建测试文件
	packageJSON := `{
		"name": "test-project",
		"version": "1.0.0",
		"dependencies": {
			"express": "^4.17.1",
			"lodash": "~4.17.21",
			"axios": "github:axios/axios#v0.21.1"
		},
		"devDependencies": {
			"jest": "^27.0.6",
			"typescript": "4.3.5"
		},
		"peerDependencies": {
			"react": ">=16.8.0",
			"react-dom": ">=16.8.0"
		},
		"optionalDependencies": {
			"fsevents": "^2.3.2"
		},
		"workspaces": [
			"packages/*"
		]
	}`

	yarnLock := `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

express@^4.17.1:
  version: "4.17.1"
  resolution: "express@npm:4.17.1"
  integrity: sha512-mHJ9O79RqluphRrcw2X/GTh3k9tVv8YcoyY4Kkh4WDMUYKRZUq0h1o0w2rrrxBqM7VoeUVqgb27xlEMXTnYt4g==
  dependencies:
    body-parser: "1.19.0"
    cookie: "0.4.0"

lodash@~4.17.21:
  version: "4.17.21"
  resolution: "lodash@npm:4.17.21"
  integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="

axios@github:axios/axios#v0.21.1:
  version: "0.21.1"
  resolution: "axios@github:axios/axios#v0.21.1"
  dependencies:
    follow-redirects: "^1.10.0"`

	yarnRC := `nodeLinker: node-modules
packageExtensions:
  "express@*":
    dependencies:
      "body-parser": "*"
plugins:
  - "@yarnpkg/plugin-typescript"
yarnPath: .yarn/releases/yarn-3.2.0.cjs`

	subPackageJSON := `{
		"name": "@test/sub-package",
		"version": "1.0.0",
		"dependencies": {
			"moment": "^2.29.1"
		}
	}`

	// 写入测试文件
	err = os.WriteFile(filepath.Join(testDir, "package.json"), []byte(packageJSON), 0644)
	if err != nil {
		t.Fatal(err)
	}

	err = os.WriteFile(filepath.Join(testDir, "yarn.lock"), []byte(yarnLock), 0644)
	if err != nil {
		t.Fatal(err)
	}

	err = os.WriteFile(filepath.Join(testDir, ".yarnrc.yml"), []byte(yarnRC), 0644)
	if err != nil {
		t.Fatal(err)
	}

	err = os.MkdirAll(filepath.Join(testDir, "packages", "sub-package"), 0755)
	if err != nil {
		t.Fatal(err)
	}

	err = os.WriteFile(filepath.Join(testDir, "packages", "sub-package", "package.json"), []byte(subPackageJSON), 0644)
	if err != nil {
		t.Fatal(err)
	}

	// 创建提取器
	logger, _ := zap.NewDevelopment()
	extractor := NewYarnExtractor(logger)

	// 执行测试
	deps, err := extractor.Extract(testDir)
	if err != nil {
		t.Fatal(err)
	}

	// 验证结果
	assert.NoError(t, err)
	assert.NotEmpty(t, deps)

	// 验证生产依赖
	found := false
	for _, dep := range deps {
		if dep.Name == "express" {
			found = true
			assert.Equal(t, "4.17.1", dep.Version)
			assert.Equal(t, "production", dep.Type)
			assert.True(t, dep.Required)
			assert.Equal(t, "yarn", dep.BuildSystem)
		}
	}
	assert.True(t, found, "Production dependency not found")

	// 验证开发依赖
	found = false
	for _, dep := range deps {
		if dep.Name == "jest" {
			found = true
			assert.Equal(t, "27.0.6", dep.Version)
			assert.Equal(t, "development", dep.Type)
			assert.True(t, dep.Required)
			assert.Equal(t, "yarn", dep.BuildSystem)
		}
	}
	assert.True(t, found, "Development dependency not found")

	// 验证对等依赖
	found = false
	for _, dep := range deps {
		if dep.Name == "react" {
			found = true
			assert.Equal(t, "16.8.0", dep.Version)
			assert.Equal(t, "peer", dep.Type)
			assert.True(t, dep.Required)
			assert.Equal(t, "yarn", dep.BuildSystem)
		}
	}
	assert.True(t, found, "Peer dependency not found")

	// 验证可选依赖
	found = false
	for _, dep := range deps {
		if dep.Name == "fsevents" {
			found = true
			assert.Equal(t, "2.3.2", dep.Version)
			assert.Equal(t, "optional", dep.Type)
			assert.False(t, dep.Required)
			assert.Equal(t, "yarn", dep.BuildSystem)
		}
	}
	assert.True(t, found, "Optional dependency not found")

	// 验证锁定依赖
	found = false
	for _, dep := range deps {
		if dep.Name == "express" && dep.Type == "locked" {
			found = true
			assert.Equal(t, "4.17.1", dep.Version)
			assert.True(t, dep.Required)
			assert.Equal(t, "yarn", dep.BuildSystem)
			assert.Contains(t, dep.Source, "yarn.lock")
			assert.Contains(t, dep.Source, "npm:4.17.1")
			assert.Len(t, dep.Dependencies, 2) // body-parser and cookie
		}
	}
	assert.True(t, found, "Locked dependency not found")

	// 验证工作区依赖
	found = false
	for _, dep := range deps {
		if dep.Name == "moment" {
			found = true
			assert.Equal(t, "2.29.1", dep.Version)
			assert.Equal(t, "production", dep.Type)
			assert.True(t, dep.Required)
			assert.Equal(t, "yarn", dep.BuildSystem)
			assert.Contains(t, dep.Source, "sub-package")
		}
	}
	assert.True(t, found, "Workspace dependency not found")
}

func TestYarnExtractor_ParseYarnRC(t *testing.T) {
	// 创建临时测试目录
	testDir, err := os.MkdirTemp("", "yarnrc-test-*")
	if err != nil {
		t.Fatal(err)
	}
	defer os.RemoveAll(testDir)

	// 创建测试文件
	yarnRC := `nodeLinker: node-modules
packageExtensions:
  "express@*":
    dependencies:
      "body-parser": "*"
  "webpack@*":
    peerDependencies:
      "webpack-cli": "*"
plugins:
  - "@yarnpkg/plugin-typescript"
  - "@yarnpkg/plugin-workspace-tools"
yarnPath: .yarn/releases/yarn-3.2.0.cjs`

	// 写入测试文件
	err = os.WriteFile(filepath.Join(testDir, ".yarnrc.yml"), []byte(yarnRC), 0644)
	if err != nil {
		t.Fatal(err)
	}

	// 创建提取器
	logger, _ := zap.NewDevelopment()
	extractor := NewYarnExtractor(logger)

	// 执行测试
	err = extractor.parseYarnRC(filepath.Join(testDir, ".yarnrc.yml"))

	// 验证结果
	assert.NoError(t, err)
}

func TestYarnExtractor_ParseLockfile(t *testing.T) {
	// 创建临时测试目录
	testDir, err := os.MkdirTemp("", "lockfile-test-*")
	if err != nil {
		t.Fatal(err)
	}
	defer os.RemoveAll(testDir)

	// 创建测试文件
	yarnLock := `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

"@babel/core@^7.0.0":
  version: "7.14.6"
  resolution: "@babel/core@npm:7.14.6"
  dependencies:
    "@babel/code-frame": "^7.14.5"
    "@babel/generator": "^7.14.5"
  optionalDependencies:
    "@babel/cli": "^7.14.5"

"react@^17.0.0":
  version: "17.0.2"
  resolution: "react@npm:17.0.2"
  integrity: sha512-gnhPt75i/dq/z3/6q/0asP78D0u592D5L1pd7M8P+dck6Fu/jJeL6iVVK23fptSUZj8Vjf++7wXA8UNclGQcbA==
  peerDependencies:
    "react-dom": "^17.0.0"`

	// 写入测试文件
	err = os.WriteFile(filepath.Join(testDir, "yarn.lock"), []byte(yarnLock), 0644)
	if err != nil {
		t.Fatal(err)
	}

	// 创建提取器
	logger, _ := zap.NewDevelopment()
	extractor := NewYarnExtractor(logger)

	// 执行测试
	deps, err := extractor.parseLockfile(filepath.Join(testDir, "yarn.lock"))

	// 验证结果
	assert.NoError(t, err)
	assert.NotEmpty(t, deps)

	// 验证依赖
	found := false
	for _, dep := range deps {
		if dep.Name == "@babel/core" {
			found = true
			assert.Equal(t, "7.14.6", dep.Version)
			assert.Equal(t, "locked", dep.Type)
			assert.True(t, dep.Required)
			assert.Equal(t, "yarn", dep.BuildSystem)
			assert.Len(t, dep.Dependencies, 3) // 2 dependencies + 1 optionalDependency
		}
	}
	assert.True(t, found, "Babel dependency not found")
}

/*
测试说明:

1. 主要测试用例:
- TestYarnExtractor_Extract: 测试完整的依赖提取功能
- TestYarnExtractor_ParseYarnRC: 测试.yarnrc.yml解析
- TestYarnExtractor_ParseLockfile: 测试yarn.lock解析

2. 测试覆盖:
- package.json解析
- yarn.lock解析
- .yarnrc.yml解析
- 工作区支持
- 各种类型的依赖
- 版本号格式处理

3. 测试数据:
- 模拟真实的package.json
- 模拟真实的yarn.lock
- 模拟真实的.yarnrc.yml
- 包含工作区
- 包含各种依赖类型
- 包含各种版本格式

4. 验证内容:
- 依赖解析的正确性
- 依赖属性的完整性
- 错误处理
- 边界情况

5. 运行方式:
go test -v ./internal/extractor -run "TestYarnExtractor"
*/ 